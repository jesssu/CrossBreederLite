#!/system/bin/sh

export PATH=/system/etc/CrossBreeder:$PATH:/sbin:/vendor/bin:/system/sbin:/system/bin:/system/xbin:

alias [='busybox ['
alias [[='busybox [['

XRANDOM="$(busybox cat /data/CrossBreeder/zzCrossBreeder/RANDOM)"
ENTROPY="$(busybox cat /data/CrossBreeder/zzCrossBreeder/ENTROPY)"
UI="$(busybox cat /data/CrossBreeder/zzCrossBreeder/UI)"
FSYNC="$(busybox cat /data/CrossBreeder/zzCrossBreeder/FSYNC)"
KSM="$(busybox cat /data/CrossBreeder/zzCrossBreeder/KSM)"
VM="$(busybox cat /data/CrossBreeder/zzCrossBreeder/VM)"
ADVCT="$(busybox cat /data/CrossBreeder/zzCrossBreeder/ADVCT)"
SQL="$(busybox cat /data/CrossBreeder/zzCrossBreeder/SQLITE)"
BOOTCOUNT="$(busybox cat /data/CrossBreeder/zzCrossBreeder/BOOTCOUNT)"
COUNT="$(busybox cat /data/CrossBreeder/zzCrossBreeder/COUNT)"

set +e

if [ "$XRANDOM" = "1" ]; then

RANDOMDEVICE=urandom
if [ -c /dev/erandom ]; then
  if [ ! -f /dev/urandom.MOD ]; then
    touch /dev/urandom.MOD
    busybox mv /dev/urandom /dev/urandom.ORIG
    busybox ln /dev/erandom /dev/urandom
    sleep 2
  fi
  busybox chmod 666 /dev/frandom
  busybox chmod 666 /dev/erandom
  RANDOMDEVICE=frandom
fi

URANDOMDEVICE="/dev/urandom"
if [ -c /dev/erandom ]; then
  if [ ! -f /dev/urandom.MOD ]; then 
    touch /dev/urandom.MOD
    busybox mv /dev/urandom /dev/urandom.ORIG
    busybox ln /dev/erandom /dev/urandom
    sleep 2
  fi
  busybox chmod 666 /dev/frandom
  busybox chmod 666 /dev/erandom
  RANDOMDEVICE=frandom
  if [ ! -c /dev/urandom.ORIG ]; then 
    busybox mknod -m 666 /dev/urandom.ORIG c 1 9
    sleep 2
  fi
  URANDOMDEVICE="/dev/urandom.ORIG"
elif [ ! -c /dev/urandom ]; then
  busybox mknod -m 666 /dev/urandom c 1 9
  sleep 2
fi

if [ ! -f /dev/random.MOD ]; then  
  touch /dev/random.MOD
  busybox rm /dev/random
  busybox ln /dev/$RANDOMDEVICE /dev/random
  sleep 2
fi

setprop ro.wmt.blcr.enable 0

for i in `busybox find /sys -name add_random -print 2>/dev/null`; do busybox echo 0 > $i; done

fi

if [ "$ENTROPY" = "1" ]; then

POOLSIZE="$(busybox cat /proc/sys/kernel/random/poolsize 2>/dev/null)"

busybox sysctl -w kernel.random.read_wakeup_threshold=8;

if [ "$(busybox cat /proc/sys/kernel/random/write_wakeup_threshold 2>/dev/null)" != "${POOLSIZE}" ]; then 
   busybox sysctl -w kernel.random.write_wakeup_threshold="${POOLSIZE}";
fi

sys_pid=`busybox pgrep system_server 2>/dev/null`

busybox renice -10 $sys_pid 2>/dev/null

fi

if [ "$UI" = "1" ]; then

busybox echo "Boosting System UI.." >> /data/cb_CHECK_PROCS.log
setprop persist.sys.scrollingcache 3
setprop windowsmgr.max_events_per_sec 300
setprop ro.max.fling_velocity 12000
setprop ro.min.fling_velocity 8000
setprop persist.sys.use_dithering 1
setprop persist.sys.purgeable_assets 1
setprop touch.pressure.scale 2

fi

if [ "$FSYNC" = "1" ]; then

if [ -e /sys/devices/virtual/misc/fsynccontrol/fsync_enabled ]; then
 busybox echo "Fsync control detected. Tuning.." >> /data/cb_CHECK_PROCS.log
 busybox echo "0" > /sys/devices/virtual/misc/fsynccontrol/fsync_enabled;
fi;
if [ -e /sys/class/misc/fsynccontrol/fsync_enabled ]; then
 busybox echo "Fsync control detected. Tuning.." >> /data/cb_CHECK_PROCS.log
 busybox echo "0" > /sys/class/misc/fsynccontrol/fsync_enabled;
fi;
if [ -e /sys/module/sync/parameters/fsync ]; then
 busybox echo "Fsync module -OFF" >> /data/cb_CHECK_PROCS.log
 busybox echo "0" > /sys/module/sync/parameters/fsync >> /data/cb_CHECK_PROCS.log

fi;
if [ -e /sys/module/sync/parameters/fsync_enabled ]; then
 busybox echo "Fsync module -OFF" >> /data/cb_CHECK_PROCS.log
 busybox echo "0" > /sys/module/sync/parameters/fsync_enabled;
 busybox echo "N" > /sys/module/sync/parameters/fsync_enabled;
fi;
if [ -e /sys/kernel/dyn_fsync/Dyn_fsync_active ]; then
 busybox echo "Dynamic fsync detected. Activating.." >> /data/cb_CHECK_PROCS.log
 busybox echo "1" > /sys/kernel/dyn_fsync/Dyn_fsync_active;
fi;

fi

if [ "$KSM" = "1" ]; then

if [ -e /sys/kernel/mm/uksm/run ]; then
  busybox echo "uKSM detected" >> /data/cb_CHECK_PROCS.log
  busybox echo "Disabling KSM.." >> /data/cb_CHECK_PROCS.log
  busybox echo "0" > /sys/kernel/mm/uksm/run;
  setprop ro.config.ksm.support false;
elif [ -e /sys/kernel/mm/ksm/run ]; then
  busybox echo "KSM detected" >> /data/cb_CHECK_PROCS.log
  busybox echo "Disabling KSM.." >> /data/cb_CHECK_PROCS.log
  busybox echo "0" > /sys/kernel/mm/ksm/run;
  setprop ro.config.ksm.support false;
else
  busybox echo "No KSM was detected" >> /data/cb_CHECK_PROCS.log
fi;
busybox echo "Disabling kernel panic.." >> /data/cb_CHECK_PROCS.log
if [ -e /proc/sys/kernel/panic_on_oops ]; then
 busybox echo "0" > /proc/sys/kernel/panic_on_oops;
fi;
if [ -e /proc/sys/kernel/panic_on_warn ]; then
 busybox echo "0" > /proc/sys/kernel/panic_on_warn;
fi;
if [ -e /proc/sys/kernel/panic ]; then
 busybox echo "0" > /proc/sys/kernel/panic;
fi;
if [ -e /sys/kernel/debug/sched_features ]; then
 busybox echo "Tuning kernel sleepers.." >> /data/cb_CHECK_PROCS.log
 busybox echo "NO_GENTLE_FAIR_SLEEPERS" > /sys/kernel/debug/sched_features;
 busybox echo "NO_AFFINE_WAKEUPS" > /sys/kernel/debug/sched_features;
 busybox echo "NO_WAKEUP_OVERLAP" > /sys/kernel/debug/sched_features;
 busybox echo "NO_WAKEUP_PREEMPT" > /sys/kernel/debug/sched_features;
 busybox echo "NO_DOUBLE_TICK" > /sys/kernel/debug/sched_features;
fi;
if [ -e /proc/sys/kernel/nmi_watchdog ]; then
 busybox echo "Disabling watchdog.." >> /data/cb_CHECK_PROCS.log
 busybox echo "0" > /proc/sys/kernel/nmi_watchdog;
fi;
fi

if [ "$VM" = "1" ]; then

busybox echo "Turning VM size.." >> /data/cb_CHECK_PROCS.log
if [ -e /proc/sys/vm/min_free_kbytes ]; then
 busybox echo "12288" > /proc/sys/vm/min_free_kbytes;
fi;
if [ -e /proc/sys/vm/vfs_cache_pressure ]; then
 busybox echo "1215752192" > /proc/sys/vm/vfs_cache_pressure;
fi;
if [ -e /proc/sys/vm/dirty_ratio ]; then
 busybox echo "99" > /proc/sys/vm/dirty_ratio;
fi;
if [ -e /proc/sys/vm/dirty_background_ratio ]; then
 busybox echo "1" > /proc/sys/vm/dirty_background_ratio;
fi;
if [ -e /proc/sys/vm/dirty_writeback_centisecs ]; then
 busybox echo "1500" > /proc/sys/vm/dirty_writeback_centisecs;
fi;
if [ -e /proc/sys/vm/dirty_expire_centisecs ]; then
 busybox echo "1000" > /proc/sys/vm/dirty_expire_centisecs;
fi;
if [ -e /proc/sys/vm/oom_dump_tasks ]; then
 busybox echo "0" > /proc/sys/vm/oom_dump_tasks;
fi;
if [ -e /proc/sys/vm/oom_kill_allocating_task ]; then
 busybox echo "0" > /proc/sys/vm/oom_kill_allocating_task;
fi;
if [ -e /proc/sys/vm/laptop_mode ]; then
 busybox echo "1" > /proc/sys/vm/laptop_mode;
fi;
if [ -e /proc/sys/vm/overcommit_memory ]; then
 busybox echo "1" > /proc/sys/vm/overcommit_memory;
 busybox echo "100" > /proc/sys/vm/overcommit_ratio;
fi;
if [ -e /proc/sys/vm/min_free_order_shift ]; then
 busybox echo "4" > /proc/sys/vm/min_free_order_shift;
fi;
if [ -e /proc/sys/vm/page-cluster ]; then
 busybox echo "1" > /proc/sys/vm/page-cluster;
fi;
if [ -e /proc/sys/vm/panic_on_oom ]; then
 busybox echo "0" > /proc/sys/vm/panic_on_oom;
fi;
if [ -e /proc/sys/vm/max_map_count ]; then
 busybox echo "65530" > /proc/sys/vm/max_map_count;
fi;
if [ -e /proc/sys/vm/drop_caches ]; then
 busybox echo "3" > /proc/sys/vm/drop_caches;
fi;

busybox echo "Tuning system resposiveness.." >> /data/cb_CHECK_PROCS.log
setprop ro.FOREGROUND_APP_ADJ 0
setprop ro.VISIBLE_APP_ADJ 2 
setprop ro.PERCEPTIBLE_APP_ADJ 3
setprop ro.HEAVY_WEIGHT_APP_ADJ 6
setprop ro.SECONDARY_SERVER_ADJ 4
setprop ro.BACKUP_APP_ADJ 7
setprop ro.HOME_APP_ADJ 1
setprop ro.HIDDEN_APP_MIN_ADJ 10
setprop ro.EMPTY_APP_ADJ 15

busybox echo "Turning VM Heap size.." >> /data/cb_CHECK_PROCS.log
RAM=$((` busybox awk '/MemTotal/{print $2}' /proc/meminfo` / 1024 ))

if [ "$RAM" -lt "2048" ]
then
 THRESHOLD="450"
 setprop dalvik.vm.heaptargetutilization 0.9
else
 THRESHOLD="375"
 setprop dalvik.vm.heaptargetutilization 0.75
fi

HEAPMAXSIZE="$(( ($RAM * 268554 / 1000000) ))"
VMHEAP="$(( $HEAPMAXSIZE / ( 1000/$THRESHOLD ) ))"

setprop dalvik.vm.heapsize "${HEAPMAXSIZE}m"
setprop dalvik.vm.heapgrowthlimit "${VMHEAP}m"
setprop persist.sys.vm.heapsize "${VMHEAP}m"
setprop persist.sys.purgeable_assets 1

busybox echo "VM Heap size can be ${HEAPMAXSIZE}m" >> /data/cb_CHECK_PROCS.log
fi

if [ "$SQL" = "1" ]; then

flag=false

if [ "$BOOTCOUNT" -lt "$COUNT" ]
then
echo "$(( $BOOTCOUNT + 1 ))" > /data/CrossBreeder/zzCrossBreeder/BOOTCOUNT
elif [ "$BOOTCOUNT" -ge "$COUNT" ]
then
echo "0" > /data/CrossBreeder/zzCrossBreeder/BOOTCOUNT
flag=true
fi

echo "The system has booted for $BOOTCOUNT times since the last optimization." >> /data/cb_CHECK_PROCS.log

if [ "$flag" == "false" ]
then
echo "The system does not need to optimize databases." >> /data/cb_CHECK_PROCS.log
exit 0
elif [ "$flag" == "true" ]
then
echo "The system will optimize databases." >> /data/cb_CHECK_PROCS.log

dbcount=0
for db in $(busybox find /data -name *.db)
do
dbcount=$((dbcount+1))
echo ">Optimizing database $dbcount..." >> /data/cb_CHECK_PROCS.log
sqlite3 $db 'VACUUM'
sqlite3 $db 'REINDEX'
done
fi

fi

if [ "$ADVCT" = "1" ]; then

busybox echo "Tweaking CPU by modify /dev/cpuctl.." >> /data/cb_CHECK_PROCS.log

for pid in `busybox ps | busybox awk '{ if ($2 ~ /^root$|^system$|^radio$|^wifi$|^blueto|^media$/) print $1 }'`; do
  busybox echo -17 > /proc/$pid/oom_adj 2>/dev/null
done

for pid in `busybox ps -o pid,user,nice,args | busybox awk '{ if ( $2 ~ /^root$/ && $3 == "0" && $4 !~ /netd$|rild$|zygote$|kswapd|vold|loop/ ) print $1 }'`; do
  busybox renice 3 $pid 2>/dev/null
  busybox ionice -c 2 -n 3 -p $pid 2>/dev/null
done

for pid in `busybox ps | busybox awk '{ if ( $2 ~ /^root$/ && $4 !~ /netd$|rild$|zygote$|kswapd|vold|loop/ ) print $1 }'`; do
  busybox ionice -c 2 -n 3 -p $pid 2>/dev/null
done

for pid in $(busybox pgrep pdflush 2>/dev/null); do
  busybox renice 7 $pid 2>/dev/null
  busybox ionice -c 3 -n 7 -p $pid 2>/dev/null
done

for pid in $(busybox pgrep flush- 2>/dev/null); do
  busybox renice 7 $pid 2>/dev/null
  busybox ionice -c 3 -n 7 -p $pid 2>/dev/null
done

for pid in `busybox ps | busybox awk '{ if ( $2 ~ /^app_/) print $1 }'`; do
  busybox renice -1 $pid 2>/dev/null
  busybox ionice -c 1 -n 0 -p $pid 2>/dev/null
done

if [ ! -d /dev/cpuctl ]; then
  busybox mkdir -p /dev/cpuctl 2>/dev/null
  busybox chown 1000.1000 /dev/cpuctl 2>/dev/null
  busybox chmod 660 /dev/cpuctl 2>/dev/null
fi

busybox mount -t cgroup -o cpu none /dev/cpuctl 2>/dev/null

if [ ! -d /dev/cpuctl/fg_boost ]; then
  busybox mkdir -p /dev/cpuctl/fg_boost 2>/dev/null
  busybox chown 1000.1000 /dev/cpuctl/fg_boost 2>/dev/null
  busybox chmod 775 /dev/cpuctl/fg_boost 2>/dev/null
fi

if [ ! -d /dev/cpuctl/bg_non_interactive ]; then
  busybox mkdir -p /dev/cpuctl/bg_non_interactive 2>/dev/null
  busybox chown 1000.1000 /dev/cpuctl/bg_non_interactive 2>/dev/null
  busybox chmod 775 /dev/cpuctl/bg_non_interactive 2>/dev/null
fi

if [ ! -d /dev/cpuctl/user ]; then
  busybox mkdir -p /dev/cpuctl/user 2>/dev/null
  busybox chown 1000.1000 /dev/cpuctl/user 2>/dev/null
  busybox chmod 775 /dev/cpuctl/user 2>/dev/null
fi

busybox cp /dev/null /dev/cpuctl/tasks 2>/dev/null
busybox cp /dev/null /dev/cpuctl/user/cgroup.procs 2>/dev/null
busybox cp /dev/null /dev/cpuctl/fg_boost/tasks 2>/dev/null
busybox cp /dev/null /dev/cpuctl/fg_boost/cgroup.procs 2>/dev/null
busybox cp /dev/null /dev/cpuctl/bg_non_interactive/tasks 2>/dev/null
busybox cp /dev/null /dev/cpuctl/bg_non_interactive/cgroup.procs 2>/dev/null


for pid in `busybox ps | busybox awk '{ if ( $2 ~ /^app_|^system$|^radio$|^wifi$|^blueto|^media$/) print $1 }'`; do
  busybox echo $pid >> /dev/cpuctl/user/cgroup.procs 2>/dev/null
  for i in `ls /proc/$pid/task 2>/dev/null`; do
    busybox echo $pid >> /dev/cpuctl/user/tasks 2>/dev/null
  done
done

pid=$(busybox pgrep zygote 2>/dev/null)
busybox renice -1 $pid 2>/dev/null
busybox ionice -c 1 -n 0 -p $pid 2>/dev/null
busybox echo $pid >> /dev/cpuctl/user/cgroup.procs 2>/dev/null

for i in `ls /proc/$pid/task 2>/dev/null`; do
  busybox echo $i >> /dev/cpuctl/user/tasks 2>/dev/null
done

busybox echo 1 > /dev/cpuctl/user/cgroup.clone_children 2>/dev/null

for pid in `dumpsys activity services | busybox grep -i app=ProcessRecord | busybox awk '{ print $2 }' | busybox grep -v '/100[0-9]}' | busybox cut -d: -f1`; do
  busybox renice 7 $pid 2>/dev/null
  busybox ionice -c 2 -n 7 -p $pid 2>/dev/null
done

for pid in `dumpsys activity services | busybox grep -i app=ProcessRecord | busybox awk '{ print $2 }' | busybox cut -d: -f1`; do
  busybox echo $pid >> /dev/cpuctl/bg_non_interactive/cgroup.procs 2>/dev/null
  for i in `ls /proc/$pid/task 2>/dev/null`; do
    busybox echo $i >> /dev/cpuctl/bg_non_interactive/tasks 2>/dev/null
  done
done

pid=$(busybox pgrep kswapd0 2>/dev/null)
busybox renice 0 $pid 2>/dev/null
busybox ionice -c 2 -n 0 -p $pid 2>/dev/null

for pid in `busybox pgrep loop 2>/dev/null`; do
  busybox renice 0 $pid 2>/dev/null
  busybox ionice -c 2 -n 0 -p $pid 2>/dev/null
done

busybox echo 96 > /dev/cpuctl/bg_non_interactive/cpu.shares 2>/dev/null

pid=$(busybox pgrep surfaceflinger 2>/dev/null)
busybox echo $pid > /dev/cpuctl/fg_boost/cgroup.procs 2>/dev/null
for i in `ls /proc/$pid/task 2>/dev/null`; do
  busybox echo $i >> /dev/cpuctl/fg_boost/tasks 2>/dev/null
done

pid=$(busybox pgrep binder 2>/dev/null)
busybox echo $pid >> /dev/cpuctl/fg_boost/cgroup.procs 2>/dev/null
for i in `ls /proc/$pid/task 2>/dev/null`; do
  busybox echo $i >> /dev/cpuctl/fg_boost/tasks 2>/dev/null
done

busybox echo 1536 > /dev/cpuctl/fg_boost/cpu.shares 2>/dev/null
busybox echo 1024 > /dev/cpuctl/cpu.shares 2>/dev/null
busybox echo 1152 > /dev/cpuctl/user/cpu.shares 2>/dev/null

fi
