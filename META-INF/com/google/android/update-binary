#!/sbin/sh
##########################################################################################
#
# Magisk Module Template Install Script
# by topjohnwu
#
##########################################################################################

# Detect whether in boot mode
ps | grep zygote | grep -v grep >/dev/null && BOOTMODE=true || BOOTMODE=false
$BOOTMODE || ps -A 2>/dev/null | grep zygote | grep -v grep >/dev/null && BOOTMODE=true

# This path should work in any cases
TMPDIR=/dev/tmp
MOUNTPATH=/magisk
IMG=/data/magisk.img
if $BOOTMODE; then
  MOUNTPATH=/dev/magisk_merge
  IMG=/data/magisk_merge.img
fi
INSTALLER=$TMPDIR/install
MAGISKBIN=/data/magisk

# Default permissions
umask 022

# Initial cleanup
rm -rf $TMPDIR 2>/dev/null
mkdir -p $INSTALLER

##########################################################################################
# Environment
##########################################################################################

OUTFD=$2
ZIP=$3

ui_print() {
  if $BOOTMODE; then
    echo "$1"
  else
    echo -n -e "ui_print $1\n" >> /proc/self/fd/$OUTFD
    echo -n -e "ui_print\n" >> /proc/self/fd/$OUTFD
  fi
}

require_new_magisk() {
  ui_print "***********************************"
  ui_print "! $MAGISKBIN isn't setup properly!"
  ui_print "! Please install Magisk v14.0+!"
  ui_print "***********************************"
  exit 1
}

###################################################

Install_to_system() {

if [ ! -f /data/SYSINSTALL.CBL ]; then
  ui_print"! Warning : Magisk is not installed"
  ui_print"- If you want to install this module to system, please flash this installer again."
  touch /data/SYSINSTALL.CBL
  exit 0
fi

rm -rf $TMPDIR 2>/dev/null
mkdir -p $INSTALLER
unzip -o "$ZIP" config.sh -d $INSTALLER 2>/dev/null

[ ! -f $INSTALLER/config.sh ] && abort "! Unable to extract zip file!"

. $INSTALLER/config.sh

MODPATH=$MOUNTPATH/$MODID

# Print mod name
print_modname

# Please leave this message in your flashable zip for credits :)
ui_print "******************************"
ui_print "Powered by Magisk (@topjohnwu)"
ui_print "******************************"

ui_print "- Mounting /system, /vendor, /data, /cache"
mount -o ro /system 2>/dev/null
mount -o ro /vendor 2>/dev/null
mount /data 2>/dev/null
mount /cache 2>/dev/null

ui_print "- Extracting module files"
unzip -o "$ZIP" -d $INSTALLER 2>/dev/null
request_size_check $INSTALLER

# Detect version and architecture
api_level_arch_detect

if [ -f /data/SYSINSTALL.CBL ]; then
  # Copy files
  ui_print "- Preparing for system Install"
  ui_print "- Copying files"
  mv $INSTALLER/system /system
  if [ "$ABILONG" = "arm64-v8a" ]; then
    SQLITE=arm64-v8a;
    SYS_Install_for_ARM
  elif [ "$ABILONG" = "armeabi-v7a" ]; then
    SQLITE=armeabi-v7a;
    SYS_Install_for_ARM
  elif [ "$ABILONG" = "armeabi" ]; then
    SQLITE=armeabi;
    SYS_Install_for_ARM
  elif [ "$ABILONG" = "x86_64" ]; then
    SQLITE=x86_64;
    SYS_Install_for_X86
  elif [ "$ABILONG" = "x86" ]; then
    SQLITE=x86;
    SYS_Install_for_X86
  else
    abort "! ARCH can't be found"
  fi
  ui_print "- SQLITE3 can be $SQLITE"
  if [ -f /system/bin/sqlite3 ]; then
    cp -af $INSTALLER/common/$SQLITE /system/bin/sqlite3
    set_perm  /system/bin/sqlite3       0       0       0755
  fi
  if [ -f /system/xbin/sqlite3 ]; then
   cp -af $INSTALLER/common/$SQLITE /system/xbin/sqlite3
   set_perm  /system/xbin/sqlite3       0       0       0755 
  fi
  if [ ! -f /system/bin/sqlite3 ] && [ ! -f /system/xbin/sqlite3 ]; then
   cp -af $INSTALLER/common/$SQLITE /system/xbin/sqlite3
   set_perm  /system/xbin/sqlite3       0       0       0755
  fi
  rm -rf /data/CrossBreeder
  cp -rf $INSTALLER/common/CrossBreeder /data/CrossBreeder
  cp -af $INSTALLER/common/post-fs-data.sh /system/etc/init.d/CBL0_initd
  cp -af $INSTALLER/common/service.sh /system/etc/init.d/CBL1_initd
  set_perm_recursive  /system/etc/CrossBreeder  0  0  0755  0755
  set_perm_recursive  /system/usr/idc  0  0  0755  0755
  set_perm_recursive  /system/etc/init.d  0  0  0755  0755
  set_perm  /system/xbin/dynbsd       0       0       0755
  rm -af /data/SYSINSTALL.CBL
  umount /system 2>/dev/null
  umount /vendor 2>/dev/null
  umount /data 2>/dev/null
  umount /cache 2>/dev/null
  ui_print "- Done"
  exit 0
fi
}

Install_for_ARM() {

ui_print "- Preparing for ARM Install"

if [ ! -f /system/bin/dnsmasq ]; then
 cp -af $INSTALLER/common/dnsmasq.CBBAK $MODPATH/system/bin/dnsmasq
fi

RNGD=/system/bin/rngd
XRNGD=/system/xbin/rngd
QRNGD=/system/bin/qrngd
XQRNGD=/system/xbin/qrngd
for SEED in $RNGD $XRNGD $QRNGD $XQRNGD; do
  if [ -f $SEED ]; then
    mktouch $MODPATH$SEED
  fi
done

rm -af $INSTALLER/common/CrossBreeder/zzCrossBreeder/ENTROPY

}

Install_for_X86() {

ui_print "- Preparing for X86 Install"

rm -rf $MODPATH/system/bin
rm -af $MODPATH/system/xbin/haveged
rm -af $MODPATH/system/etc/CrossBreeder/CHECK_PROCS
rm -af $MODPATH/system/etc/CrossBreeder/CB_RunHaveged
rm -af $MODPATH/system/etc/CrossBreeder/CB_RunDNSMasq
rm -af $MODPATH/system/etc/CrossBreeder/dnrd.10053
rm -af $MODPATH/system/etc/CrossBreeder/zzCHECK_NET_DNS
rm -af $MODPATH/system/etc/CrossBreeder/zzCrossBreeder
rm -af $MODPATH/system/etc/CrossBreeder/punchmod
rm -rf $MODPATH/system/lib
rm -af $MODPATH/system/etc/CrossBreeder/ENTROPY_FEED_FREQUENCY_SECS
rm -af $MODPATH/system/etc/CrossBreeder/IRQ_FLUSH_FREQUENCY_MINUTES
cp -af $INSTALLER/common/zzCHECK_NET_DNS_X86 $MODPATH/system/etc/CrossBreeder/zzCHECK_NET_DNS
cp -af $INSTALLER/common/zzCrossBreeder_X86 $MODPATH/system/etc/CrossBreeder/zzCrossBreeder
cp -af $INSTALLER/common/CHECK_PROCS_X86 $MODPATH/system/etc/CrossBreeder/CHECK_PROCS
rm -af $INSTALLER/common/CrossBreeder/zzCrossBreeder/HAVEGED
rm -af $INSTALLER/common/CrossBreeder/zzCrossBreeder/PUNCHMOD

}

SYS_Install_for_ARM() {

ui_print "- Preparing for ARM Install"

if [ ! -f /system/bin/dnsmasq ]; then
  cp -af $INSTALLER/common/dnsmasq.CBBAK /system/bin/dnsmasq
fi

RNGD=/system/bin/rngd
XRNGD=/system/xbin/rngd
QRNGD=/system/bin/qrngd
XQRNGD=/system/xbin/qrngd
for SEED in $RNGD $XRNGD $QRNGD $XQRNGD; do
  if [ -f $SEED ]; then
    rm -af $SEED
  fi
done

rm -af $INSTALLER/common/CrossBreeder/zzCrossBreeder/ENTROPY

set_perm  /system/bin/dnsmasq_dhcp       0       0       0755
set_perm  /system/xbin/haveged       0       0       0755
set_perm  /system/lib/modules/frandom.ko       0       0       0644

}

SYS_Install_for_X86() {

ui_print "- Preparing for X86 Install"

rm -af /system/bin/dnsmasq_dhcp
rm -af /system/xbin/haveged
rm -af /system/etc/CrossBreeder/CHECK_PROCS
rm -af /system/etc/CrossBreeder/CB_RunHaveged
rm -af /system/etc/CrossBreeder/CB_RunDNSMasq
rm -af /system/etc/CrossBreeder/dnrd.10053
rm -af /system/etc/CrossBreeder/zzCHECK_NET_DNS
rm -af /system/etc/CrossBreeder/zzCrossBreeder
rm -af /system/etc/CrossBreeder/punchmod
rm -af /system/lib/modules/frandom.ko
rm -af /system/etc/CrossBreeder/ENTROPY_FEED_FREQUENCY_SECS
rm -af /system/etc/CrossBreeder/IRQ_FLUSH_FREQUENCY_MINUTES
cp -af $INSTALLER/common/zzCHECK_NET_DNS_X86 /system/etc/CrossBreeder/zzCHECK_NET_DNS
cp -af $INSTALLER/common/zzCrossBreeder_X86 /system/etc/CrossBreeder/zzCrossBreeder
cp -af $INSTALLER/common/CHECK_PROCS_X86 /system/etc/CrossBreeder/CHECK_PROCS
rm -af $INSTALLER/common/CrossBreeder/zzCrossBreeder/HAVEGED
rm -af $INSTALLER/common/CrossBreeder/zzCrossBreeder/PUNCHMOD

}


###################################################

ui_print "- Mounting /system, /vendor, /data, /cache"
mount -o ro /system 2>/dev/null
mount -o ro /vendor 2>/dev/null
mount /data 2>/dev/null
mount /cache 2>/dev/null

# Utility functions must exist
[ -f $MAGISKBIN/util_functions.sh ] || Install_to_system
# Load utility fuctions
. $MAGISKBIN/util_functions.sh
get_outfd

$BOOTMODE && ! is_mounted /magisk && abort "! Magisk is not activated!"
[ ! -f /system/build.prop ] && abort "! /system could not be mounted!"

# Detect version and architecture
api_level_arch_detect

# You can get the Android API version from $API, the CPU architecture from $ARCH
# Useful if you are creating Android version / platform dependent mods

# We need busybox/binaries to be setup
$BOOTMODE && boot_actions || recovery_actions

##########################################################################################
# Preparation
##########################################################################################

# Extract common files
unzip -o "$ZIP" module.prop config.sh 'common/*' -d $INSTALLER 2>/dev/null

[ ! -f $INSTALLER/config.sh ] && abort "! Unable to extract zip file!"
# Load configurations
. $INSTALLER/config.sh

# Check the min magisk version
MIN_VER=`grep_prop template $INSTALLER/module.prop`
[ ! -z $MAGISK_VER_CODE -a $MAGISK_VER_CODE -ge $MIN_VER ] || require_new_magisk
MODID=`grep_prop id $INSTALLER/module.prop`
MODPATH=$MOUNTPATH/$MODID

# Print mod name
print_modname

# Please leave this message in your flashable zip for credits :)
ui_print "******************************"
ui_print "Powered by Magisk (@topjohnwu)"
ui_print "******************************"

##########################################################################################
# Install
##########################################################################################

request_zip_size_check "$ZIP"

if [ -f "$IMG" ]; then
  ui_print "- Found $IMG"
  image_size_check $IMG
  if [ "$reqSizeM" -gt "$curFreeM" ]; then
    newSizeM=$(((reqSizeM + curUsedM) / 32 * 32 + 64))
    ui_print "- Resizing $IMG to ${newSizeM}M"
    $MAGISKBIN/magisk --resizeimg $IMG $newSizeM
  fi
else
  newSizeM=$((reqSizeM / 32 * 32 + 64));
  ui_print "- Creating $IMG with size ${newSizeM}M"
  $MAGISKBIN/magisk --createimg $IMG $newSizeM
fi

ui_print "- Mounting $IMG to $MOUNTPATH"
MAGISKLOOP=`$MAGISKBIN/magisk --mountimg $IMG $MOUNTPATH`
is_mounted $MOUNTPATH || abort "! $IMG mount failed..."

###################################################

# Delete Mod
if [ -d $MODPATH ]; then
  ui_print "- Removing files"
  rm -rf $MODPATH
  rm -rf /data/CrossBreeder
  rm -f $MOUNTPATH/.core/post-fs-data.d/CBL_initd.sh
  $MAGISKBIN/magisk --umountimg $MOUNTPATH $MAGISKLOOP
  rmdir $MOUNTPATH

  # Shrink the image if possible
  image_size_check $IMG
  newSizeM=$((curUsedM / 32 * 32 + 64))
  if [ $curSizeM -gt $newSizeM ]; then
    ui_print "- Shrinking $IMG to ${newSizeM}M"
    $MAGISKBIN/magisk --resizeimg $IMG $newSizeM
  fi

  $BOOTMODE || recovery_cleanup
  rm -rf $TMPDIR

  ui_print "- Done"
  exit 0
fi

###################################################

# Create mod paths
rm -rf $MODPATH 2>/dev/null
rm -f $MOUNTPATH/.core/post-fs-data.d/CBL_initd.sh
mkdir -p $MODPATH

ui_print "- Extracting module files"
unzip -o "$ZIP" 'system/*' -d $MODPATH 2>/dev/null

###################################################

if [ "$ABILONG" = "arm64-v8a" ]; then
 SQLITE=arm64-v8a;
 Install_for_ARM
elif [ "$ABILONG" = "armeabi-v7a" ]; then
 SQLITE=armeabi-v7a;
 Install_for_ARM
elif [ "$ABILONG" = "armeabi" ]; then
 SQLITE=armeabi;
 Install_for_ARM
elif [ "$ABILONG" = "x86_64" ]; then
 SQLITE=x86_64;
 Install_for_X86
elif [ "$ABILONG" = "x86" ]; then
 SQLITE=x86;
 Install_for_X86
else
 abort "! ARCH can't be found"
fi

ui_print "- SQLITE3 can be $SQLITE"

if [ -f /system/bin/sqlite3 ]; then
 if [ ! -d $MODPATH/system/bin ]; then
  mkdir -p $MODPATH/system/bin
 fi
 cp -af $INSTALLER/common/$SQLITE $MODPATH/system/bin/sqlite3
fi

if [ -f /system/xbin/sqlite3 ]; then
 cp -af $INSTALLER/common/$SQLITE $MODPATH/system/xbin/sqlite3
fi

if [ ! -f $MODPATH/system/bin/sqlite3 ] && [ ! -f $MODPATH/system/xbin/sqlite3 ]; then
 cp -af $INSTALLER/common/$SQLITE $MODPATH/system/xbin/sqlite3
fi

rm -af /data/SYSINSTALL.CBL
rm -rf /data/CrossBreeder
cp -rf $INSTALLER/common/CrossBreeder /data/CrossBreeder

###################################################

# Handle replace folders
for TARGET in $REPLACE; do
  mktouch $MODPATH$TARGET/.replace
done

# Auto Mount
$AUTOMOUNT && touch $MODPATH/auto_mount

# prop files
$PROPFILE && cp -af $INSTALLER/common/system.prop $MODPATH/system.prop

# Module info
cp -af $INSTALLER/module.prop $MODPATH/module.prop
if $BOOTMODE; then
  # Update info for Magisk Manager
  mktouch /magisk/$MODID/update
  cp -af $INSTALLER/module.prop /magisk/$MODID/module.prop
fi

# post-fs-data mode scripts
$POSTFSDATA && cp -af $INSTALLER/common/post-fs-data.sh $MOUNTPATH/.core/post-fs-data.d/CBL_initd.sh

set_perm_recursive  $MOUNTPATH/.core/post-fs-data.d/CBL_initd.sh  0  0  0755  0755

# service mode scripts
$LATESTARTSERVICE && cp -af $INSTALLER/common/service.sh $MODPATH/service.sh

ui_print "- Setting permissions"
set_permissions

##########################################################################################
# Finalizing
##########################################################################################

$MAGISKBIN/magisk --umountimg $MOUNTPATH $MAGISKLOOP
rmdir $MOUNTPATH

# Shrink the image if possible
image_size_check $IMG
newSizeM=$((curUsedM / 32 * 32 + 64))
if [ $curSizeM -gt $newSizeM ]; then
  ui_print "- Shrinking $IMG to ${newSizeM}M"
  $MAGISKBIN/magisk --resizeimg $IMG $newSizeM
fi

$BOOTMODE || recovery_cleanup
rm -rf $TMPDIR

ui_print "- Done"
exit 0
